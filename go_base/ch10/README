标准包: go list std | wc -l
检索包: http://godoc.org
4.导入声明
import (
  "crypto/rand"
  mrand "math/rand" // alternative name mrand avoids conflict
)
5.包的匿名导入： 只是利用包级变量的初始化表达式和执行导入包的init初始化函数
抑制编译错误
jpeg案例:
  _ "image/png" // register PNG decoder
  ./mandelbrot | ./jpeg >mandelbrot.jpg
  将解码输入的PNG格式图像， 然后转换为JPEG格式的图像输出
  如果没有匿名导入 不能正确识别和解码PNG格式的图像
  在init初始化函数中通过调用image.RegisterFormat函数注册
  主程序只需要匿名导入特定图像驱动包就可以用image.Decode解码对应格式的图像了


多语言构建系统 类似Bazel的构建系统
包名的三种例外：
    main
5.包的导入：
_ "image/png" // register PNG decoder
./mandelbrot | ./jpeg >mandelbrot.jpg
将解码输入的PNG格式图像， 然后转换为JPEG格式的图像输出
如果没有匿名导入 不能正确识别和解码PNG格式的图像

主程序只需要匿名导入特定图像驱动包就可以用image.Decode解码对应格式的图像了

database/sql案例:
import (
"database/sql"
_ "github.com/lib/pq" // enable support for Postgres
_ "github.com/go-sql-driver/mysql" // enable support for MySQL
)
db, err = sql.Open("postgres", dbname) // OK
db, err = sql.Open("mysql", dbname) // OK
db, err = sql.Open("sqlite3", dbname) // returns error: unknown driver "sqlite3"

6.包命名
一般要用短小的包名
避免包名使用可能被经常用于局部变量的名字
包名一般采用单数的形式
要避免包名有其它的含义 tempconv
要考虑包名和成员名两个部分如何很好地配合 不要报名和成员名一样了

包可能只提供了数据结构和相关的方法(eg New用于创建实例)

7.
GOPATH对应的工作区目录有三个子目录 src pkg bin
GOROOT用来指定Go的安装目录
GOARCH环境变量用于指定处理器的类型 amd64 386 arm
GOOS指定目标操作系统
7.1
get
go get 下载一个
go get ... 下载整个子目录的每个包,同时计算并下载依赖的每个包
支持当前流行的托管网站GitHub、Bitbucket和Launchpad
其他可能需要指定版本控制系统的具体路径和协议

golint 编码风格检查
go get github.com/golang/lint/golint
$GOPATH/bin/golint gopl.io/ch2/popcount 对代码检查

7.2
go get 得到的代码可以使用git查看版本
git remote -v 可以查看项目的版本,远程url地址和go get的可能不一致
包用一个自定义的导入路径
真实的代码却是由更通用的服务提供
页面 https://golang.org/x/net/html 实际地址元数据,告诉Go语言的工具当前包真实的Git仓库托管地址：

go get -u 下载最新的重新编译,不加本地有则不拉取
go vendor 用vendor存储依赖包的固定版本

7.3构建包
库包不输出
main包输出可执行程序,以导入路径的最后一段作为可执行程序的名字
习惯可执行程序放在每个包的cmd目录下面
go build
a.不加包名,需要进入到某个具体的包
b.在一个随意位置,使用项目名开头到一个具体的包,都会对应到gopath下的这个项目
c.在一个随意位置,使用相对路径  ./ 或者 ../
d.其他的比如src/xx 错的

go build 一个具体的文件,以基础文件名作为最终的可执行程序的名字

go run 是build后直接执行

go install会保留编译过程中每个包的编译成果,build会丢弃
被编译的包会被保存到$GOPATH/pkg目录下
go install 命令和 go build 命令都不会重新编译没有发生变化的包
go build -i 命令将安装每个目标所依赖的包
go install 命令会将编译结果安装到GOOS和GOARCH对应的目录。
$GOPATH/pkg/darwin_amd64
$ GOARCH=386 go build gopl.io/ch10/cross

代码只在特定平台编译:
如果一个文件名包含了一个操作系统或处理器类型名字
如net_linux.go或asm_amd64.s
方法一:
Go语言的构建工具将只在对应的平台编译这些文件
方法二:
在包声明和包注释的前面，文件中加注释:
// +build linux darw 只在指定的系统中编译
// +build ignore 不编译这个文件

7.4包文档
包注释在任何一个文件中 或一个单独的doc.go
go doc time 打印time包的文档
go doc time.Since 打印包具体成员
go doc time.Duration.Seconds

godoc -http :8000
在工作区提供
-analysis=type
-analysis=pointer
打开文档和代码中关于静态分析的结果

7.5内部包internal包
只能被和internal目录有同一个父目录的包所导入
构建工具对包含internal名字的路径段的包导入路径做了特殊处理

7.6查询包
go list github.com/go-sql-driver/mysql  测试包是否在工作区并打印它的导入路径
go list ... 任意的包的导入路径
go list gopl.io/ch3/... 特定子目录下的所有包
go list ...xml...和某个主题相关的所有包
go list -json hash 用JSON格式打印每个包的元信息
go list -f '{{join .Deps " "}}' strconv 用户使用text/template包的模板语言定义输出文本的格式
