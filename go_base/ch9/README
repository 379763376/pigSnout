基于共享变量的并发


1.竞争条件
竞争条件指的是程序在多个goroutine交叉执行操作时，没有给出正确的结果

函数并发安全的情况：
一个函数在线性程序中可以正确地工作
在并发的情况下，这个函数依然可以正确地工作
并发安全的函数不需要额外的同步工作
==》类型是并发安全的话 ，类型的一些方法和操作函数就都是并发安全的

并发安全的类型是例外
导出包级别的函数一般情况下都是并发安全的 ，package级的变量没法被限制在单 一的gorouine，修改这些变量“必须”使用互斥条件

两个goroutine并发访问一个变量 只要有一个有写操作就会发生数据竞争

三种方式可以避免数据竞争：
一、不要去写变量：在创建goroutine之前的初始化阶段，就初始化了map中的所有条目并且再也 不去修改它们
二、避免从多个goroutine访问变量：func goroutine是唯一一个能够访问变量的goroutine,变量都被限定在了一个单独的goroutine中;不要使用共享数据来通信；使用通信来 共享数据
    bank1案例：变量被限制在了monitor goroutine中
    对变量的所有访问就是线性的：流水线的每一个阶段都能够避免在将变量传送到下 一阶段时再去访问它
三、同一个时刻最多只有一 个goroutine在访问
    “互斥” 允许很多goroutine去访问变量


2.sync.Mutex互斥锁
    bank2案例：二元信号量
    系统内置互斥锁sync.Mutex

3.sync.RWMutex读写锁

4.内存同步

5.sync.Once初始化

6.竞争条件检测

7.并发的非阻塞缓存

8.goroutines和线程


